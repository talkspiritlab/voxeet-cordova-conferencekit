// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import QuartzCore;
@import VoxeetSDK;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VoxeetConferenceKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSError;
@class VTUser;

SWIFT_CLASS("_TtC19VoxeetConferenceKit19VoxeetConferenceKit")
@interface VoxeetConferenceKit : NSObject
/// Voxeet conference kit singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VoxeetConferenceKit * _Nonnull shared;)
+ (VoxeetConferenceKit * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Conference appear animation default starts maximized. If false, the conference will appear minimized.
@property (nonatomic) BOOL appearMaximized;
/// The default behavior (false) start the conference on the built in receiver. If true, it will start on the built in speaker.
@property (nonatomic) BOOL defaultBuiltInSpeaker;
/// The default behavior (false) start the conference without video. If true, it will enable the video at conference start.
@property (nonatomic) BOOL defaultVideo;
/// If true, the conference will behave like a cellular call, if a user hangs up or decline the caller will be disconnected.
@property (nonatomic) BOOL telecom;
/// Enable or disable CallKit (default state: disable).
@property (nonatomic) BOOL callKit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Initializing the VoxeetConferenceKit framework.
/// \param consumerKey To get a consumer key, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param consumerSecret To get a consumer secret, you need to contact Voxeet in order to use the Voxeet SDK.
///
- (void)initializeWithConsumerKey:(NSString * _Nonnull)consumerKey consumerSecret:(NSString * _Nonnull)consumerSecret;
/// Initializing the VoxeetConferenceKit framework.
/// \param accessToken Access token.
///
/// \param refreshTokenClosure When this closure is called, the access token needs to be refreshed from your server. When the token is catched, use the returned closure to update the SDK: <code>closure("token")</code>.
///
- (void)initializeWithAccessToken:(NSString * _Nonnull)accessToken refreshTokenClosure:(void (^ _Nonnull)(void (^ _Nonnull)(NSString * _Nonnull)))refreshTokenClosure;
/// Openning a session is like a login for an external user (your user). However you need to have initialized the SDK with <code>connectSession</code> sets to false. By passing the user ID, it will log the user into our server with your ID (you can additionally pass some extra information with the <code>userInfo</code> parameter).
/// \param userID The user ID is like its identifier, we link this ID to our serverâ€™s users.
///
/// \param userInfo With this dictionary, you can pass additional information linked to your user. Here are some examples: <code>["externalName": "User", "externalPhotoUrl": "http://voxeet.com/voxeet-logo.jpg", ...]</code>.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)openSessionWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Opening a session is like a login for a non-voxeet user (or anonymous user). However the SDK needs to be initialized with automaticallyOpenSession set to false. By passing the user identifier, it will link your user into our server.
/// \param user A <code>VTUser</code> object.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)openSessionWithUser:(VTUser * _Nonnull)user completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Updates current user information. You can use this method to update the user identifier, name, avatar URL or any other information you want.
/// \param userID The user ID is linked to Voxeetâ€™s users.
///
/// \param userInfo With this dictionary, you can pass additional information linked to your user. Here are some examples: <code>["externalName": "User", "externalPhotoUrl": "http://voxeet.com/voxeet-logo.jpg", ...]</code>.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)updateSessionWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Updates current user information. You can use this method to update the user identifier, name, avatar URL or any other information you want.
/// \param user A <code>VTUser</code> object.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)updateSessionWithUser:(VTUser * _Nonnull)user completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Closing a session is like a logout. It will stop the socket and stop sending push notifications.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)closeSessionWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Starts the conference. As soon as this method is called, it opens the voxeet conference UI.
/// \param id A unique conference identifier.
///
/// \param users If setted, it will display all users in the top bar even if they havenâ€™t join the conference yet (with an inactive state).
///
/// \param invite Send an invitation to others users if true (a VoIP notification is pushed if the application is killed and your app has enable notifications).
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startConferenceWithId:(NSString * _Nonnull)id users:(NSArray<VTUser *> * _Nullable)users invite:(BOOL)invite success:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Stops the current conference (leave and close voxeet conference UI).
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopConferenceWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)maximizeWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
- (void)minimizeWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
