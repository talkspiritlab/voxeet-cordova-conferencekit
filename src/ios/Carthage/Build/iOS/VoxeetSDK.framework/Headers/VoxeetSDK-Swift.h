// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import WebRTC;
#endif

#import <VoxeetSDK/VoxeetSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VoxeetSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









@class NSBundle;

SWIFT_CLASS("_TtC9VoxeetSDK12VTAudioSound")
@interface VTAudioSound : NSObject
/// If true, looping on the current sound.
@property (nonatomic) BOOL loop;
/// The volume of the audio file. The range of valid values are from 0.0 to 1.0.
@property (nonatomic) float volume;
/// The angle of the audio file. The range of valid values are from -1.0 to 1.0.
@property (nonatomic) float angle;
/// The distance of the audio file. The range of valid values are from 0.0 to 1.0.
@property (nonatomic) float distance;
/// Initializing a new VTAudioSound. The audio file must be mono to get a 3D mixing properties.
/// \param fileURL File path URL.
///
- (nullable instancetype)initWithFileURL:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initializing a new VTAudioSound. The audio file must be mono to get a 3D mixing properties.
/// \param name File’s name.
///
/// \param ext File’s extension (mp3, wav, …).
///
/// \param bundle Current bundle.
///
- (nullable instancetype)initForResource:(NSString * _Nonnull)name ofType:(NSString * _Nonnull)ext bundle:(NSBundle * _Nullable)bundle error:(NSError * _Nullable * _Nullable)error;
/// Play the audio file.
/// \param completion A block object to be executed when the sound has finished playing. This block has no return value.
///
- (BOOL)playAndReturnError:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(void))completion;
- (void)pause;
/// Stop the audio file.
- (void)stop;
/// Get the current time of the playing sound.
///
/// returns:
/// current time in second
- (double)currentTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol VTConferenceDelegate;
@class VTUser;
enum VTConferenceState : NSInteger;

SWIFT_CLASS("_TtC9VoxeetSDK12VTConference")
@interface VTConference : NSObject
/// Conference delegate.
@property (nonatomic, weak) id <VTConferenceDelegate> _Nullable delegate;
/// Getting live conference ID (Voxeet internal identifier). If <code>nil</code> there isn’t any current conference.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Getting the live conference alias. If <code>nil</code> there isn’t any current conference.
@property (nonatomic, readonly, copy) NSString * _Nullable alias;
/// Gettings all current conference’s users.
@property (nonatomic, readonly, copy) NSArray<VTUser *> * _Nonnull users;
/// The default behavior (false) start the conference on the built in receiver. If true, it will start on the built in speaker.
@property (nonatomic) BOOL defaultBuiltInSpeaker;
/// Conference state.
@property (nonatomic, readonly) enum VTConferenceState state;
/// The default behavior (false) start the conference without video. If true, it will enable the video at conference start.
@property (nonatomic) BOOL defaultVideo;
/// Some conference constraints can be customized like video size (<code>kMaxHeight</code>), frame rate (<code>kMaxFrameRate</code>), …
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable constraints;
/// Enable or disable Voxeet 3D sound.
@property (nonatomic) BOOL audio3D;
@property (nonatomic, readonly, strong) VTUser * _Nullable ownUser SWIFT_DEPRECATED_MSG("You can now use the session object to get your own user `VoxeetSDK.shared.session.user`.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class RTCMediaStream;

@interface VTConference (SWIFT_EXTENSION(VoxeetSDK)) <MediaAPIDelegate>
- (void)sessionCreatedForPeer:(NSString * _Nonnull)peerId withType:(NSString * _Nonnull)type andSdp:(NSString * _Nonnull)sdp;
- (void)iceGatheringCompletedForPeer:(NSString * _Nonnull)peerId withCandidates:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)candidates;
- (void)streamAddedForPeer:(NSString * _Nonnull)peerId withStream:(RTCMediaStream * _Nonnull)mediaStream;
- (void)streamUpdatedForPeer:(NSString * _Nonnull)peerId withStream:(RTCMediaStream * _Nonnull)mediaStream;
- (void)streamRemovedForPeer:(NSString * _Nonnull)peerId withStream:(RTCMediaStream * _Nonnull)mediaStream;
- (void)screenShareStreamAddedForPeer:(NSString * _Nonnull)peerId withStream:(RTCMediaStream * _Nonnull)mediaStream;
- (void)screenShareStreamRemovedForPeer:(NSString * _Nonnull)peerId withStream:(RTCMediaStream * _Nonnull)mediaStream;
@end


@interface VTConference (SWIFT_EXTENSION(VoxeetSDK))
/// Creating Voxeet demo conference.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)demoWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Manually create a conference (the join method implicitly creates one if it’s not already created).
/// \param parameters You can optionally pass some parameters when you create a conference such as <code>conferenceAlias</code> (example: <code>["conferenceAlias": "myCustomConferenceAlias", "conferenceType": "standard", "metadata": ["stats": false, "liveRecording": false], "params": ["videoCodec": "H264"]]</code>). Those parameters are specific to a conference (not to be confused with userInfo).
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)createWithParameters:(NSDictionary<NSString *, id> * _Nullable)parameters success:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Invite some users in a conference.
/// \param conferenceID Conference ID.
///
/// \param ids User’s ids to invite.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)inviteWithConferenceID:(NSString * _Nonnull)conferenceID ids:(NSArray<NSString *> * _Nonnull)ids completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Joining a conference with an ID (if the conference isn’t created yet, this method will automatically create a new one and join it).
/// \param conferenceID Conference identifier retrieved from create response (also compatible with conference alias).
///
/// \param video Starts own video when launching the conference (false by default).
///
/// \param userInfo With this dictionary, you can pass additional information linked to your user. For example if the user is only in “listener” mode you can add: <code>["participantType": "listener"]</code>. Other examples: <code>["externalName": "User", "externalPhotoUrl": "http://voxeet.com/voxeet-logo.jpg", ...]</code> if the SDK isn’t initilized with userInfo or if the session isn’t connected yet..
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)joinWithConferenceID:(NSString * _Nonnull)conferenceID video:(BOOL)video userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo success:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Leaving the current conference.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)leaveWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)declineWithConferenceID:(NSString * _Nonnull)conferenceID completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sending broadcast message to the current conference.
/// \param message The string message that will be sent to the current conference.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)broadcastWithMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Getting a specific conference status.
/// \param conferenceID Conference ID.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[String: Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)statusWithConferenceID:(NSString * _Nonnull)conferenceID success:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Subscribe to a conference to get its status within a notification (the conference needs to be created before using this method).
/// \param conferenceID Conference ID.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)statusSubscribeWithConferenceID:(NSString * _Nonnull)conferenceID completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Unsubscribe the conference status notification.
/// \param conferenceID Conference ID.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)statusUnsubscribeWithConferenceID:(NSString * _Nonnull)conferenceID completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Getting the history of a specific conference.
/// \param conferenceID Conference ID.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)historyWithConferenceID:(NSString * _Nonnull)conferenceID success:(void (^ _Nullable)(NSArray * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Getting own conference histories. You can retrieve 0 to 40 events per pages.
/// \param nbEvents Number of meetings wanted (0-40).
///
/// \param lastConferenceID Use (lastMeetingId & lastTimestamp) to handle paging.
///
/// \param lastConferenceTimestamp Use (lastMeetingId & lastTimestamp) to handle paging.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)historiesWithNbEvents:(NSInteger)nbEvents lastConferenceID:(NSString * _Nullable)lastConferenceID lastConferenceTimestamp:(int64_t)lastConferenceTimestamp success:(void (^ _Nullable)(NSArray * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Getting own conference histories. You can retrieve 0 to 40 events per pages.
/// \param nbEvents Number of meetings wanted (0-40).
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)historiesWithNbEvents:(NSInteger)nbEvents success:(void (^ _Nullable)(NSArray * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
/// Start recording the current conference.
/// \param fireInterval Useful when replaying a conference with an offset (in milliseconds). Allows the video stream to be more or less reactive depending on the length of the record. By default at 10000 milliseconds.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startRecordingWithFireInterval:(NSInteger)fireInterval completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)startRecordingWithConferenceID:(NSString * _Nonnull)conferenceID fireInterval:(NSInteger)fireInterval completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "startRecording(fireInterval:completion:)");
/// Stop recording (need to start a record with <code>startRecording</code> method before stopping it).
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopRecordingWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)stopRecordingWithConferenceID:(NSString * _Nonnull)conferenceID completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "stopRecording(completion:)");
/// Replay a recording conference (need to start and stop a record before).
/// \param conferenceID Conference ID (do not pass an alias, only the voxeet conference UUID returned by the join method for example).
///
/// \param offset You can start the recording after an offset in millisecond. For example if you pass 1000ms, the conference will jump the first second.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)replayWithConferenceID:(NSString * _Nonnull)conferenceID offset:(NSInteger)offset completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Replay a recording conference (need to start and stop a record before).
/// \param conferenceID Conference ID (do not pass an alias, only the voxeet conference UUID returned by the join method for example).
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)replayWithConferenceID:(NSString * _Nonnull)conferenceID completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)subscribeWithConferenceAlias:(NSString * _Nonnull)confAlias completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)unsubscribeWithConferenceAlias:(NSString * _Nonnull)confAlias completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

@protocol RTCVideoRenderer;

@interface VTConference (SWIFT_EXTENSION(VoxeetSDK))
/// Getting the live conference ID. If <code>nil</code> there is no current conference.
///
/// returns:
/// current conference ID.
- (NSString * _Nullable)liveConferenceID SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Has been renamed as `VoxeetSDK.shared.conference.id`", "id");
/// Getting a specific user.
/// \param userID User ID.
///
///
/// returns:
/// a <code>VTUser</code> object.
- (VTUser * _Nullable)userWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Changing the user position.
/// \param userID User ID.
///
/// \param angle Changes the user position with an angle.
///
/// \param distance Changes the user position with a distance.
///
- (void)userPositionWithUserID:(NSString * _Nonnull)userID angle:(double)angle distance:(double)distance;
/// Changing the user position (with just an angle, see <code>setUserPosition(userID: String, angle: Double, distance: Double)</code>).
/// \param userID User ID.
///
/// \param angle Changes the user position with an angle.
///
- (void)userPositionWithUserID:(NSString * _Nonnull)userID angle:(double)angle;
/// Changing the user position (with just a distance, see <code>setUserPosition(userID: String, angle: Double, distance: Double)</code>).
/// \param userID User ID.
///
/// \param distance Changes the user position with a distance.
///
- (void)userPositionWithUserID:(NSString * _Nonnull)userID distance:(double)distance;
/// Muting / unmuting a user.
/// \param userID User ID.
///
/// \param isMuted Mute or unmute a user.
///
- (void)muteWithUserID:(NSString * _Nonnull)userID isMuted:(BOOL)isMuted;
/// Toggle muting / Unmuting on a user.
/// \param userID User ID.
///
///
/// returns:
/// mute state.
- (BOOL)toggleMuteWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Switching between BuiltInSpeaker and BuiltInReceiver.
- (void)switchDeviceSpeaker;
/// Switching between BuiltInSpeaker and BuiltInReceiver.
/// \param forceBuiltInSpeaker Forces the audio to get set on the main speaker if <code>true</code>. If the value is <code>false</code> the BuiltInReceiver will be forced.
///
- (void)switchDeviceSpeakerWithForceBuiltInSpeaker:(BOOL)forceBuiltInSpeaker;
/// Attaching a media stream to a renderer.
/// \param stream Stream to be rendered into the view.
///
/// \param renderer The view renderer that will display the video.
///
- (void)attachMediaStream:(RTCMediaStream * _Nonnull)stream renderer:(id <RTCVideoRenderer> _Nonnull)renderer;
/// Unattaching a media stream to a renderer.
/// \param stream Stream to be rendered into the view.
///
/// \param renderer The view renderer that will display the video.
///
- (void)unattachMediaStream:(RTCMediaStream * _Nullable)stream renderer:(id <RTCVideoRenderer> _Nonnull)renderer;
///
- (RTCMediaStream * _Nullable)getMediaStreamWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
///
- (RTCMediaStream * _Nullable)getScreenShareMediaStream SWIFT_WARN_UNUSED_RESULT;
/// Getting the users’s voice level.
/// \param userID User ID.
///
///
/// returns:
/// the current voice level of a user.
- (double)voiceLevelWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Flipping the device camera (front/back).
- (void)flipCamera;
/// Starting a video stream for a specific user.
/// \param userID User ID.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startVideoWithUserID:(NSString * _Nonnull)userID completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stopping a video stream for a specific user.
/// \param userID User ID.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopVideoWithUserID:(NSString * _Nonnull)userID completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Start a video screen share of the application.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startScreenShareWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)startScreenShareWithBroadcast:(BOOL)broadcast completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)updateScreenShareWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Stop a video screen share of the application.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopScreenShareWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=11.0);
@end


SWIFT_PROTOCOL("_TtP9VoxeetSDK20VTConferenceDelegate_")
@protocol VTConferenceDelegate
- (void)participantJoinedWithUserID:(NSString * _Nonnull)userID stream:(RTCMediaStream * _Nonnull)stream;
- (void)participantUpdatedWithUserID:(NSString * _Nonnull)userID stream:(RTCMediaStream * _Nonnull)stream;
- (void)participantLeftWithUserID:(NSString * _Nonnull)userID;
- (void)messageReceivedWithUserID:(NSString * _Nonnull)userID message:(NSString * _Nonnull)message;
- (void)screenShareStartedWithUserID:(NSString * _Nonnull)userID stream:(RTCMediaStream * _Nonnull)stream;
- (void)screenShareStoppedWithUserID:(NSString * _Nonnull)userID;
@optional
- (void)participantAddedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo stream:(RTCMediaStream * _Nonnull)stream SWIFT_DEPRECATED_MSG("", "participantJoined(userID:stream:)");
- (void)participantUpdatedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo stream:(RTCMediaStream * _Nonnull)stream SWIFT_DEPRECATED_MSG("", "participantUpdated(userID:stream:)");
- (void)participantRemovedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo SWIFT_DEPRECATED_MSG("", "participantLeft(userID:)");
- (void)messageReceivedWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo message:(NSString * _Nonnull)message SWIFT_DEPRECATED_MSG("", "messageReceived(userID:message:)");
@end

typedef SWIFT_ENUM(NSInteger, VTConferenceState, closed) {
  VTConferenceStateConnecting = 0,
  VTConferenceStateConnected = 1,
  VTConferenceStateDisconnecting = 2,
  VTConferenceStateDisconnected = 3,
};


SWIFT_CLASS("_TtC9VoxeetSDK18VTFilePresentation")
@interface VTFilePresentation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Uploads and converts a file.
/// \param path File path.
///
/// \param progress Sets a closure to be called periodically during the lifecycle of the request as data is written to or read from the server.
///
/// \param success A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>[Any]?</code> argument which correspond to a JSON object.
///
/// \param fail A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)convertWithPath:(NSURL * _Nonnull)path progress:(void (^ _Nullable)(double))progress success:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable))success fail:(void (^ _Nullable)(NSError * _Nonnull))fail;
- (void)convertFileWithPath:(NSURL * _Nonnull)path progress:(void (^ _Nullable)(double))completionProgress success:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable))successCompletion fail:(void (^ _Nullable)(NSError * _Nonnull))failCompletion SWIFT_DEPRECATED_MSG("", "convert(path:progress:success:fail:)");
/// Starting a file presentation.
/// \param fileID You can get the file identifier in the <code>convertFile(path:)</code> callback’s response.
///
/// \param filename Optional filename.
///
/// \param page Default page is 0.
///
/// \param pageCount Default page count is 1. You can retrieve it in the <code>convertFile(path:)</code> callback’s response.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startWithFileID:(NSString * _Nonnull)fileID filename:(NSString * _Nonnull)filename page:(NSInteger)page pageCount:(NSInteger)pageCount completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)startPresentationWithFileID:(NSString * _Nonnull)fileID filename:(NSString * _Nonnull)filename page:(NSInteger)page pageCount:(NSInteger)pageCount completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "start(fileID:filename:page:pageCount:completion:)");
/// Updating the current page of file presented.
/// \param fileID You can get the file identifier in the <code>convertFile(path:)</code> callback’s response.
///
/// \param page Update the current page presented.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)updateWithFileID:(NSString * _Nonnull)fileID page:(NSInteger)page completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)updatePresentationWithFileID:(NSString * _Nonnull)fileID page:(NSInteger)page completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "update(fileID:page:completion:)");
/// Stopping the current file presented.
/// \param fileID You can get the file identifier in the <code>convertFile(path:)</code> callback’s response.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopWithFileID:(NSString * _Nonnull)fileID completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)stopPresentationWithFileID:(NSString * _Nonnull)fileID completion:(void (^ _Nullable)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "stop(fileID:page:completion:)");
/// Getting an image (URL) of a file.
/// \param fileID file identifier.
///
/// \param page file page.
///
- (NSURL * _Nullable)getImageWithFileID:(NSString * _Nonnull)fileID page:(NSInteger)page SWIFT_WARN_UNUSED_RESULT;
/// Getting a thumbnail image (URL) of a file.
/// \param fileID file identifier.
///
/// \param page file page.
///
- (NSURL * _Nullable)getThumbnailWithFileID:(NSString * _Nonnull)fileID page:(NSInteger)page SWIFT_WARN_UNUSED_RESULT;
@end

enum VTSessionState : NSInteger;
@protocol VTSessionDelegate;

SWIFT_CLASS("_TtC9VoxeetSDK9VTSession")
@interface VTSession : NSObject
/// Current session user.
@property (nonatomic, readonly, strong) VTUser * _Nullable user;
/// Getting current session state.
@property (nonatomic, readonly) enum VTSessionState state;
/// Session delegate.
@property (nonatomic, strong) id <VTSessionDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface VTSession (SWIFT_EXTENSION(VoxeetSDK))
/// Connecting the SDK with the API (manually).
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)connectWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Manually connect the session is like a login. However you need to have initialized the SDK with connectSession sets to false. By passing the userID, it will log your user into our servers with your ID (you can additionally pass some extra information with the <code>userInfo</code> parameter). This method can be useful if you want to implement CallKit (VoIP push notifications) because once you openned a session, you can receive notifications. If you don’t open a session it will automatically openning a new one when joinning a conference for example.
/// \param userID User ID is linked to our server’s users.
///
/// \param userInfo Some additional information can be linked to a user. Here are some examples: <code>["externalName": "User", "externalPhotoUrl": "http://voxeet.com/voxeet-logo.jpg", ...]</code>.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)connectWithUserID:(NSString * _Nonnull)userID userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Disonnecting the SDK with the API (manually). Closing a session is like a logout, it will stop the socket and stop sending VoIP push notification.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)disconnectWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


SWIFT_PROTOCOL("_TtP9VoxeetSDK17VTSessionDelegate_")
@protocol VTSessionDelegate
- (void)sessionUpdatedWithState:(enum VTSessionState)state;
@end

typedef SWIFT_ENUM(NSInteger, VTSessionState, closed) {
  VTSessionStateConnecting = 0,
  VTSessionStateConnected = 1,
  VTSessionStateReconnecting = 2,
  VTSessionStateDisconnected = 3,
};

enum VTUserConferenceStatus : NSInteger;
@class VTUserConferenceInfo;

SWIFT_CLASS("_TtC9VoxeetSDK6VTUser")
@interface VTUser : NSObject
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, readonly) enum VTUserConferenceStatus status;
@property (nonatomic, readonly) BOOL asStream;
@property (nonatomic, copy) NSString * _Nullable externalID;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable avatarURL;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull metadata;
@property (nonatomic, readonly) double angle;
@property (nonatomic, readonly) double distance;
@property (nonatomic, readonly) BOOL mute;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull info;
@property (nonatomic, readonly, strong) VTUserConferenceInfo * _Nonnull conferenceInfo SWIFT_DEPRECATED_MSG("You can now use directly `angle`, `distance` and `mute` in the `VTUser` object.");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExternalID:(NSString * _Nullable)externalID name:(NSString * _Nullable)name avatarURL:(NSString * _Nullable)avatarURL OBJC_DESIGNATED_INITIALIZER;
@end


@interface VTUser (SWIFT_EXTENSION(VoxeetSDK))
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nullable)name photoURL:(NSString * _Nullable)photoURL SWIFT_DEPRECATED_MSG("", "init(externalID:name:avatarURL:)");
- (NSString * _Nullable)externalName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "name");
- (NSString * _Nullable)externalPhotoURL SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "avatarURL");
@end


SWIFT_CLASS("_TtC9VoxeetSDK20VTUserConferenceInfo") SWIFT_DEPRECATED_MSG("You can now use directly `angle`, `distance` and `mute` in the `VTUser` object.")
@interface VTUserConferenceInfo : NSObject
@property (nonatomic, readonly) double angle;
@property (nonatomic, readonly) double distance;
@property (nonatomic, readonly) BOOL mute;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VTUserConferenceStatus, closed) {
  VTUserConferenceStatusReserved = 0,
  VTUserConferenceStatusInactive = 1,
  VTUserConferenceStatusDecline = 2,
  VTUserConferenceStatusConnecting = 3,
  VTUserConferenceStatusConnected = 4,
  VTUserConferenceStatusLeft = 5,
  VTUserConferenceStatusWarning = 6,
  VTUserConferenceStatusError = 7,
};


SWIFT_CLASS("_TtC9VoxeetSDK19VTVideoPresentation")
@interface VTVideoPresentation : NSObject
/// Starting a video presentation.
/// \param url Video URL.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)startWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stopping the current video presented.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)stopWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Playing a paused video.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)playWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Pausing a presented video.
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)pauseWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Seeking and jumping to time offset.
/// \param time Offset in millisecond
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)seekWithTime:(NSInteger)time completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RTCVideoViewShading;
@class NSCoder;

SWIFT_CLASS("_TtC9VoxeetSDK11VTVideoView")
@interface VTVideoView : RTCEAGLVideoView
/// By default the video fits its renderer, this option allows to fill it.
@property (nonatomic) BOOL contentFill;
/// Enable or disable a mirror effect.
@property (nonatomic) BOOL mirrorEffect;
- (void)layoutSubviews;
- (void)setSize:(CGSize)size;
- (nonnull instancetype)initWithFrame:(CGRect)frame shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder shader:(id <RTCVideoViewShading> _Nonnull)shader OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9VoxeetSDK9VoxeetSDK")
@interface VoxeetSDK : NSObject
/// Voxeet SDK singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VoxeetSDK * _Nonnull shared;)
+ (VoxeetSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Session (socket related).
@property (nonatomic, readonly, strong) VTSession * _Nonnull session;
/// Conference manager.
@property (nonatomic, readonly, strong) VTConference * _Nonnull conference;
/// Enable CallKit (is disabled by default).
@property (nonatomic) BOOL callKit;
/// Includes CallKit calls in the system’s Recents list at the end of each call if true (available for iOS 11 or higher).
@property (nonatomic) BOOL includesCallsInRecents;
/// Lets CallKit ringing until timeout (in seconds).
@property (nonatomic) double incomingCallTimeout;
/// The default behavior (false) start the conference on the built in receiver. If true, it will start on the built in speaker.
@property (nonatomic) BOOL defaultBuiltInSpeaker SWIFT_DEPRECATED_MSG("You can now use the conference object.", "conference.defaultBuiltInSpeaker");
@property (nonatomic) BOOL defaultVideo SWIFT_DEPRECATED_MSG("You can now use the conference object.", "conference.defaultVideo");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




@interface VoxeetSDK (SWIFT_EXTENSION(VoxeetSDK))
/// Initializing the Voxeet SDK.
/// \param consumerKey To get a consumer key, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param consumerSecret To get a consumer secret, you need to contact Voxeet in order to use the Voxeet SDK.
///
/// \param userInfo With this dictionary, you can pass additional information. For example you can add any data you want to initialize a user: <code>["externalId": "1234", "externalName": "User", "externalPhotoUrl": "http://voxeet.com/voxeet-logo.jpg", ...]</code>.
///
/// \param connectSession You may want to manage your user identifier and information like a classic login. You can connect your session later by setting this parameter to false and call <code>VoxeetSDK.shared.session.connect(userID:userInfo:completion:)</code>. If true, the SDK will automatically connect your user (anonymously identified if <code>userInfo</code> parameter is empty). If <code>callKit</code> is enabled, push notifications capability needs to be ON.
///
- (void)initializeWithConsumerKey:(NSString * _Nonnull)consumerKey consumerSecret:(NSString * _Nonnull)consumerSecret userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo connectSession:(BOOL)connectSession;
/// Blacklisting / unblacklisting an external ID to not receive notifications from this user anymore.
/// \param externalID The external ID is setted when initializing the SDK (<code>userInfo</code> parameter).
///
/// \param ban Ban (true) / unban (false) an external user.
///
/// \param completion A block object to be executed when the server connection sequence ends. This block has no return value and takes a single <code>NSError</code> argument that indicates whether or not the connection to the server succeeded.
///
- (void)blacklistWithExternalID:(NSString * _Nonnull)externalID ban:(BOOL)ban completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end




@interface VoxeetSDK (SWIFT_EXTENSION(VoxeetSDK))
- (void)initializeWithConsumerKey:(NSString * _Nonnull)consumerKey consumerSecret:(NSString * _Nonnull)consumerSecret userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo callKit:(BOOL)callKit connectSession:(BOOL)connectSession SWIFT_DEPRECATED_MSG("", "initialize(consumerKey:consumerSecret:userInfo:connectSession:)");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
